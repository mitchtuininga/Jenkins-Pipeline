pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                echo 'Building the code using Maven.'
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                echo 'Running unit and integration tests using JUnit and Mockito.'
            }
            post {
                always {
                    writeFile file: 'logs_unit_tests.txt', text: 'This file contains the logs of the unit and integration tests.'
                    emailext to: "mitch.tuininga@gmail.com",
                    subject: "Unit and Integration Tests Status Email",
                    body: "The build was a: ${currentBuild.currentResult} \nLogs: ...",
                    attachmentsPattern: "logs_unit_tests.txt"
                }
            }
        }
        stage('Code Analysis') {
            steps {
                echo 'Analysing the code using SonarQube.'
            }
        }
        stage('Security Scan') {
            steps {
                echo 'Performing a security scan using OWASP Dependency-Check.'
            }
            post {
                always {
                    writeFile file: 'logs_security_scan.txt', text: 'This file contains the logs of the security scan.'
                    emailext to: "mitch.tuininga@gmail.com",
                    subject: "Security Scan Status Email",
                    body: "The build was a: ${currentBuild.currentResult} \nLogs: ...",
                    attachmentsPattern: "logs_security_scan.txt"
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                echo 'Deploying the application to a staging server on AWS EC2.'
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                echo 'Running integration tests on the staging environment using Postman.'
            }
        }
        stage('Deploy to Production') {
            steps {
                echo 'Deploying the application to a production server on AWS EC2.'
            }
        }
    }
}